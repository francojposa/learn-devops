helm install \
  cert-manager jetstack/cert-manager \
  --version v1.8.0 \
  --namespace cert-manager \
  --create-namespace \
  --set installCRDs=true

EMAIL=franco@francoposa.io
cat << EOF | kubectl apply -f -
apiVersion: cert-manager.io/v1
kind: ClusterIssuer
metadata:
  name: letsencrypt-staging
  namespace: cert-manager
spec:
  acme:
    # You must replace this email address with your own.
    # Let's Encrypt will use this to contact you about expiring
    # certificates, and issues related to your account.
    email: ${EMAIL}
    server: https://acme-staging-v02.api.letsencrypt.org/directory
    privateKeySecretRef:
      # Secret resource that will be used to store the account's private key.
      name: letsencrypt-staging-issuer-account-key
    # Add a single challenge solver, HTTP01 using nginx
    solvers:
    - http01:
        ingress:
          class: traefik
EOF

DOMAIN=francoposa.dev
cat << EOF | kubectl apply -f -
---
apiVersion: cert-manager.io/v1
kind: Certificate
metadata:
  name: ${DOMAIN}-cert-staging
  namespace: cert-manager
spec:
  dnsNames:
    - "${DOMAIN}"
  secretName: ${DOMAIN}-cert-staging
  issuerRef:
    kind: ClusterIssuer
    name: letsencrypt-staging
EOF

# PROD

EMAIL=franco@francoposa.io
cat << EOF | kubectl apply -f -
apiVersion: cert-manager.io/v1
kind: ClusterIssuer
metadata:
  name: letsencrypt-prod
  namespace: cert-manager
spec:
  acme:
    # You must replace this email address with your own.
    # Let's Encrypt will use this to contact you about expiring
    # certificates, and issues related to your account.
    email: ${EMAIL}
    server: https://acme-v02.api.letsencrypt.org/directory
    privateKeySecretRef:
      # Secret resource that will be used to store the account's private key.
      name: letsencrypt-prod-issuer-account-key
    # Add a single challenge solver, HTTP01 using nginx
    solvers:
    - http01:
        ingress:
          class: traefik
EOF

DOMAIN=francoposa.dev
cat << EOF | kubectl apply -f -
---
apiVersion: cert-manager.io/v1
kind: Certificate
metadata:
  name: ${DOMAIN}-cert-prod
  namespace: default
spec:
  dnsNames:
    - "${DOMAIN}"
  secretName: ${DOMAIN}-cert-prod
  issuerRef:
    kind: ClusterIssuer
    name: letsencrypt-prod
EOF